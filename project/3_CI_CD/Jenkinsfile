// Jenkinsfile test me

pipeline {

    agent none

    stages {

        // stage('Code Quality Test') {

        //     parallel{

        //         stage('Score Code Quality Test') {

        //             agent {
        //                 docker {
        //                     image 'in92/devops_pylint:v1.4' 
        //                 }
        //             }

        //             steps{
        //                 sh 'pylint --disable=C,R,W,E project/2_DevLab/experiment_rfor/score.py'
        //             }

        //             post {
        //                 success {
        //                     echo "Score code file successfully passed the Code Quality Test!"
        //                 }
        //                 failure {
        //                     echo "Code failed the quality test, please see logs."
        //                 }
        //             }
        //         }

        //         stage('Train Code Quality Test') {

        //             agent {
        //                 docker {
        //                     image 'in92/devops_pylint:v1.4' 
        //                 }
        //             }

        //             steps{
        //                 sh 'pylint --disable=C project/2_DevLab/experiment_rfor/train.py'
        //             }

        //             post {
        //                 success {
        //                     echo "Score code file successfully passed the Code Quality Test!"
        //                 }
        //                 failure {
        //                     echo "Code failed the quality test, please see logs."
        //                 }
        //             }
        //         }
        //     }
        // }  

        // stage('Code Validation Test') {

        //     parallel {

        //         stage('Validate Score Code') {

        //             agent {
        //                 docker {
        //                     image 'python:3-alpine' 
        //                 }
        //             }

        //             steps {
        //                 sh 'python -m py_compile project/2_DevLab/experiment_rfor/score.py'
        //             }

        //             post {

        //             success {
        //                     echo 'Score code file successfully validated!'
        //                 }

        //             failure {
        //                     echo 'Code failed the Validation test, please see logs.'
        //                 }
        //             }
        //         }

        //         stage('Validate Train Code') {

        //             agent {
        //                 docker {
        //                     image 'python:3-alpine' 
        //                 }
        //             }

        //             steps {
        //                 sh 'python -m py_compile project/2_DevLab/experiment_rfor/train.py'
        //             }

        //             post {

        //             success {
        //                     echo 'Train code file successfully validated!'
        //                 }

        //             failure {
        //                     echo 'Code failed the Validation test, please see logs.'
        //                 }
        //             }
        //         }
        //     }
        // }

        // stage('Unit Test for Score code') {

        //     agent {
        //         docker {
        //             image 'in92/devops_pyunit:v1.1' 
        //             }
        //     }

        //     steps {
        //         sh 'python project/3_CI_CD/3_unit_test/unit_test_pipeline.py project/2_DevLab/experiment_rfor/rfor_pipeline.pickle project/3_CI_CD/3_unit_test/test.csv result.csv'
        //     }

        //     post {

        //         success {
        //                 echo 'Score code file successfully passed Unit Test!'
        //             }

        //         failure {
        //                 echo 'Code failed the Unit test, please see logs.'
        //             }
        //     }

        // }

        stage('Integration test for Score code') {

            // parallel{

                // stage("Run tests") {

                    // agent any

                    // }

                    agent {
                        docker {
                            image 'in92/devops_omm_intest:v1.3'
                            // args "-p 9999:9999"
                        }
                    }

                    steps {

                        sh("pwd")
                        sh("ls")
                        sh("cd ./project/3_CI_CD/4_integration_test/model")
                        sh("which python")
                        sh("ls")
                        // sh("python -W ignore ContainerWrapper.py -i ivnard_sample.csv -o 1582581595.089225.csv")
                        // sh(returnStdout: true, script: "if test -f '1582581595.089225.csv'; then echo 'The image scores successfully!'; else echo 'Something wrong with container. Check the logs!'; exit 1; fi")
                        // sh("cat 1582581595.089225.csv")
                    }
                    
                    // steps {

                    //     script {

                    //         docker.image('in92/devops_omm_intest:v1.2').withRun('-p 9999:9999') { test ->
                    //                 docker.image('in92/devops_omm_intest:v1.1').inside("-u 0 --entrypoint=/pybox/app/startServer.sh") {
                    //                 sh("pwd")
                    //                 sh("ls")
                    //                 sh("cd ./project/3_CI_CD/4_integration_test/model")
                    //                 sh("which python")
                    //                 // sh("python -W ignore ContainerWrapper.py -i ivnard_sample.csv -o 1582581595.089225.csv")
                    //                 // sh(returnStdout: true, script: "if test -f '1582581595.089225.csv'; then echo 'The image scores successfully!'; else echo 'Something wrong with container. Check the logs!'; exit 1; fi")
                    //                 // sh("cat 1582581595.089225.csv")
                    //                 }
                    //             }
                    //         }
                    //     }

                    // steps {

                    //     script {

                    //         docker.image('in92/devops_omm_intest:v1.1').withRun('') { test ->
                    //             docker.image('in92/devops_omm_intest:v1.1').inside("-u 0 --entrypoint=/pybox/app/startServer.sh --link ${test.id}:test_score") {
                    //             }
                    //         }
                    //     }

                    //         docker.image('in92/devops_omm_intest:v1.1').inside("--workdir=/home/test --link ${test.id}:test_score") {

                    //             sh 'python --version'
                                    
                    //             }
                    //         }
                    //     }
                    // }

                    // steps {

                    //     script {

                    //         docker.image('in92/devops_score_sidecar:v1.6').withRun('-p 9999:9999') { test ->
                    //             docker.image('in92/devops_score_sidecar:v1.6').inside("-u 0 --entrypoint=/pybox/app/startServer.sh --link ${test.id}:test_score") {
                    //             }

                    //         docker.image('in92/devops_test_exec:v1.2').inside("--workdir=/home/test --link ${test.id}:test_score") {

                    //                 env.TOKEN = sh(script:"curl -s test_score:9999/", returnStdout: true).trim()
                    //                 sh(returnStdout: true, script: "if [ ${env.TOKEN} == 'pong' ]; then echo 'Instance is up...'; else echo 'Something is wrong with container instance'; exit 1; fi")
                    //                 env.EXECUTION_ID = sh(returnStdout: true, script:"curl -s --form file=@project/3_CI_CD/4_integration_test/exec_container/test.csv --form press=OK test_score:9999/executions | jq -r '.id'").trim()
                    //                 sh("echo ${env.EXECUTION_ID}")
                    //                 sh(returnStdout: true, script: "if [ ! -z ${env.EXECUTION_ID} ]; then curl -s -o project/3_CI_CD/4_integration_test/exec_container/result.csv test_score:9999/query/${env.EXECUTION_ID}; else echo 'Something is wrong with container instance'; exit 1; fi")
                    //                 sh(returnStdout: true, script: "curl -s -o project/3_CI_CD/4_integration_test/exec_container/result.log test_score:9999/query/${env.EXECUTION_ID}/log")
                    //                 sh(returnStdout: true, script: "curl -s -o project/3_CI_CD/4_integration_test/exec_container/system.log test_score:9999/system/log")
                    //                 sh("cat project/3_CI_CD/4_integration_test/exec_container/result.csv")
                    //                 sh("cat project/3_CI_CD/4_integration_test/exec_container/result.log")
                    //                 sh("tail -5 project/3_CI_CD/4_integration_test/exec_container/system.log")
                                    
                    //             }
                    //         }
                    //     }
                    // }

                    post {

                    success {
                            echo 'Score code file successfully passed Unit Test!'
                        }

                    failure {
                            echo 'Code failed the Unit test, please see logs.'
                        }
                    }
                // }
            // }
        }

        // stage('Model MetaData Quality Test') {

        //     parallel {

        //         stage('Validate inputVar.json file') {

        //             agent {
        //                 docker {
        //                     image 'python:3-alpine' 
        //                 }
        //             }

        //             steps {
        //                 sh "python -c 'import sys,json; json.load(sys.stdin)' < project/2_DevLab/experiment_rfor/inputVar.json"
        //             }

        //             post {

        //             success {
        //                     echo 'inputVar.json file successfully validated!'
        //                 }

        //             failure {
        //                     echo 'inputVar.json file failed the quality test, please see review them.'
        //                 }
        //             }
        //         }

        //         stage('Validate outputVar.json file') {

        //             agent {
        //                 docker {
        //                     image 'python:3-alpine' 
        //                 }
        //             }

        //             steps {
        //                 sh "python -c 'import sys,json; json.load(sys.stdin)' < project/2_DevLab/experiment_rfor/outputVar.json"
        //             }

        //             post {

        //             success {
        //                     echo 'outputVar.json file successfully validated!'
        //                 }

        //             failure {
        //                     echo 'outputVar.json file failed the quality test, please see review them.'
        //                 }
        //             }

        //         }

        //         stage('Validate fileMetadata.json file') {

        //             agent {
        //                 docker {
        //                     image 'python:3-alpine' 
        //                 }
        //             }

        //             steps {
        //                 sh "python -c 'import sys,json; json.load(sys.stdin)' < project/2_DevLab/experiment_rfor/fileMetadata.json"
        //             }

        //             post {

        //             success {
        //                     echo 'fileMetadata.json file successfully validated!'
        //                 }

        //             failure {
        //                     echo 'fileMetadata.json file failed the quality test, please see review them.'
        //                 }
        //             }

        //         }
        //     }
        // }

        // stage('SAS Model Manager Repo service') {

        //     agent {
        //         docker {
        //             image 'in92/devops_model_registration:v2.0'
        //             args '-p 9997:9997'
        //             }
        //     }

        //     steps {
        //         // sh 'python /pyservice/registration/Model_Manager_Registration_services.py'
        //         sh 'python project/3_CI_CD/5_model_manager_registration_service/Model_Manager_Registration_services.py'
        //     }

        //     post {

        //     success {
        //             echo 'Model Image successfully registered!'
        //         }

        //     failure {
        //             echo 'Model Repository fails to register the model image, please see logs.'
        //         }
        //     }
        // }
    }
}